import std.time;
import std.io;

struct RandomState {
    seed: uint = 0;
};

fn tea(val0: uint, val1: uint) -> uint {
    let v0 = val0;
    let v1 = val1;
    let s0 = 0u;

    for(let n = 0; n < 16; n += 1) {
        s0 += 2654435769u;
        v0 += ((v1 << 4u) + 2738958700u) ^ (v1 + s0) ^ ((v1 >> 5u) + 3355524772u);
        v1 += ((v0 << 4u) + 2911926141u) ^ (v0 + s0) ^ ((v0 >> 5u) + 2123724318u);
    }

    return v0;
}

fn lcg(state: RandomState) -> uint {
    let LCG_A = 1664525u;
    let LCG_C = 1013904223u;
    state->seed = (LCG_A * state->seed + LCG_C);
    return state->seed & -1u;
}

fn rand_uint(state: RandomState) -> uint {
    return std.random.lcg(state);
}

fn rand(state: RandomState, min: uint, max: uint) -> uint {
    let n = std.random.rand_uint(state);
    return (n % (max - min)) + min;
}

fn init_rand() -> RandomState {
    return std.random.RandomState { std.time.time() };
}
